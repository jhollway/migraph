on:
  push:
    branches: 
      - main

name: Check and release

jobs:

  build:
    name: Build for ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release', artifact_name: '*.tar.gz', asset_name: macOS}
          - {os: windows-latest, r: 'release', artifact_name: '*.zip', asset_name: winOS}
          # - {os: ubuntu-18.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest", artifact_name: '*.tar.gz', asset_name: linuxOS}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      
    steps:
      - uses: actions/checkout@v2
        
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      - uses: r-lib/actions/setup-pandoc@master
        
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      #- name: Install system dependencies
      #  if: runner.os == 'Linux'
      #  env:
      #    RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
      #  run: |
      #    Rscript -e "remotes::install_github('r-hub/sysreqs')"
      #    sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
      #    sudo -s eval "$sysreqs"

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("pkgbuild")
        shell: Rscript {0}
      - name: Document
        run: Rscript -e 'roxygen2::roxygenise()'
      - name: Binary
        run: |
          pkgbuild::clean_dll()
          binary <- pkgbuild::build(binary = TRUE, needs_compilation = TRUE, compile_attributes = TRUE)
          dir.create("build")
          file.copy(binary, "build")
        shell: Rscript {0}
    
      - name: Save binary artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.config.asset_name }}
          path: build/
          
      - name: Calculate code coverage
        run: Rscript -e "covr::codecov()"

  release:
    name: Bump version and release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout one
        uses: actions/checkout@master
        with:
          fetch-depth: '0'
      - name: Bump version and push tag
        id: newtag
        uses: anothrNick/github-tag-action@1.17.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
      - name: Checkout two
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.newtag.outputs.tag }}
          release_name: Release ${{ steps.newtag.outputs.tag }}
          draft: false
          prerelease: false
          
      - name: Download binaries
        uses: actions/download-artifact@v2
        
      - name: Display structure of downloaded files
        run: ls -R

      - name: Zip up
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq -r roctopus_AllOS.zip . -i ./macOS/* ./winOS/*

      - name: Display structure of downloaded files again
        run: ls -R

      - name: Upload binary
        id: upload-binary 
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: roctopus_AllOS.zip
          asset_name: roctopus_AllOS.zip
          asset_content_type: application/zip
          